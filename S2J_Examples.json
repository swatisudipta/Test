[
    {
        "input_example": "[\n    {{\n        \"trigger\": [\n            \"main\"\n        ],\n        \"pool\": {{\n            \"name\": \"MOBAgent\"\n    }},\n        \"stages\": [\n            {{\n                \"stage\": \"Build with Maven\",\n                \"steps\": [\n                    {{\n                        \"task\": \"Maven\",\n                        \"inputs\": {{\n                            \"mavenPomFile\": \"pom.xml\",\n                            \"goals\": \"clean install\",\n                            \"publishJUnitResults\": true,\n                            \"testResultsFiles\": \"**/surefire-reports/TEST-*.xml\",\n                            \"javaHomeOption\": \"JDKVersion\",\n                            \"jdkVersionOption\": \"1.8\",\n                            \"mavenVersionOption\": \"Default\",\n                            \"mavenOptions\": \"-Xmx1024m\",\n                            \"sonarQubeRunAnalysis\": false\n    }},\n                        \"displayName\": \"Build with Maven\"\n    }}\n                ]\n    }},\n            {{\n                \"stage\": \"Publish Artifacts\",\n                \"steps\": [\n                    {{\n                        \"task\": \"PublishBuildArtifacts\",\n                        \"inputs\": {{\n                            \"pathToPublish\": \"$(Build.SourcesDirectory)/target\",\n                            \"artifactName\": \"drop\"\n    }},\n                        \"displayName\": \"Publish Artifacts\"\n    }}\n                ]\n    }}\n        ]\n    }}\n]",
        "output_example": "pipeline {\n    agent any\n\n    environment {\n        SONAR_HOST_URL = 'http://your-sonarqube-url'\n         SONAR_PROJECT_KEY = 'your-project-key'\n    }\n\n    stages {\n    stage('Checkout') {\n        steps {\n            git branch: 'my_specific_branch',url: 'https://github.com/name/repo.git'\n        }\n    }        stage('Build with Maven') {\n            steps {\n                script {\n                    sh '''\n                        mvn clean install \\\\n                        -Dmaven.test.failure.ignore=true \\\\n                        -Dsurefire.reportNameSuffix=TEST \\\\n                        -Djava.version=1.8 \\\\n                        -Xmx1024m\n                    '''\n                }\n            }\n        }\n\n        stage('Publish JUnit Results') {\n            steps {\n                junit '**/target/surefire-reports/TEST-*.xml'\n            }\n        }\n\n        stage('SonarQube Analysis') {\n            when {\n                expression { return false }\n            }\n            steps {\n                withSonarQubeEnv('Your-SonarQube-Server-Name') {\n                    sh '''\n                        mvn sonar:sonar \\\\n                        -Dsonar.projectKey=${SONAR_PROJECT_KEY} \\\\n                        -Dsonar.host.url=${SONAR_HOST_URL}\n                    '''\n                }\n            }\n        }\n\n        stage('Publish Artifacts') {\n            steps {\n                archiveArtifacts artifacts: 'target/**/*', fingerprint: true\n            }\n        }\n    }\n\n    post {\n        always {\n            junit '**/target/surefire-reports/TEST-*.xml'\n        }\n    }\n}",
        "output_docs": "==========================================\nDocumentation and Setup Guide\n==========================================\n\nPre-requisites:\n\n1. Jenkins Agent Setup\n   - Agent Label: MOBAgent\n   - Java 8 must be installed and available in PATH\n   - Maven must be installed and available in PATH\n   - Network access to SonarQube if analysis is enabled\n\n2. Required Jenkins Plugins\n   - Pipeline Plugin\n   - Maven Integration Plugin (optional if Maven is directly installed on agent)\n   - SonarQube Scanner Plugin\n   - JUnit Plugin\n   - Pipeline: Basic Steps Plugin\n\n3. SonarQube Global Configuration\n   - Manage Jenkins -> Configure System -> SonarQube Servers\n   - Add Server Name: Your-SonarQube-Server-Name (update if different)\n   - Set Server URL and Credentials (if needed)\n\n4. Project Structure (Maven Project Expected)\n   my-project/\n   ├── Jenkinsfile\n   ├── pom.xml\n   └── src/\n\n5. Recommended Job Configuration\n   - Job Type: Pipeline\n   - Definition: Pipeline script from SCM\n   - SCM: Git (or your version control)\n   - Branch: main (or desired branch)\n   - Script Path: Jenkinsfile (at project root)\n\n6. SonarQube Environment Variables\n   - SONAR_HOST_URL: Set to your SonarQube URL\n   - SONAR_PROJECT_KEY: Set to your project key in SonarQube\n\n7. Pipeline Stages Summary\n   - Build with Maven: Compiles and packages project\n   - Publish JUnit Results: Publishes test reports\n   - SonarQube Analysis: Scans code quality (disabled by default)\n   - Publish Artifacts: Archives build outputs\n\n=========================================="
    },
    {
        "input_example": "[\n    {{\n        \"trigger\": [\n            \"main\"\n        ],\n        \"pool\": {{\n            \"name\": \"MOBAgent\"\n    }},\n        \"stages\": [\n            {{\n                \"stage\": \"Login to ACR\",\n                \"steps\": [\n                    {{\n                        \"task\": \"Docker\",\n                        \"inputs\": {{\n                            \"command\": \"login\",\n                            \"containerRegistry\": \"CAAASServCon\"\n    }},\n                        \"displayName\": \"Login to ACR\"\n    }}\n                ]\n    }},\n            {{\n                \"stage\": \"Build and Push\",\n                \"steps\": [\n                    {{\n                        \"script\": \"docker build -t demodevopsregistry.azurecr.io/caaas:latest .\ndocker push demodevopsregistry.azurecr.io/caaas:latest\",\n                        \"displayName\": \"Build and Push\"\n    }}\n                ]\n    }},\n            {{\n                \"stage\": \"Pull Latest Image\",\n                \"steps\": [\n                    {{\n                        \"script\": \"docker pull demodevopsregistry.azurecr.io/caaas:latest\",\n                        \"displayName\": \"Pull Latest Image\"\n    }}\n                ]\n    }}\n        ]\n    }}\n]",
        "output_example": "pipeline {\n    agent any\n    environment {\n        ACR_NAME = 'demodevopsregistry.azurecr.io'\n        IMAGE_NAME = 'caass'\n        IMAGE_TAG = 'latest'\n        FULL_IMAGE_NAME = \"${ACR_NAME}/${IMAGE_NAME}:${IMAGE_TAG}\"\n    }\n    stages {\n    stage('Checkout') {\n        steps {\n            git branch: 'my_specific_branch',url: 'https://github.com/name/repo.git'\n        }\n    }        stage('Login to ACR') {\n            steps {\n                script {\n                    withDockerRegistry([credentialsId: 'CAAASServCon', url: \"https://${ACR_NAME}\"]) {\n                        echo 'Logged in to ACR successfully'\n                    }\n                }\n            }\n        }\n        stage('Build and Push') {\n            steps {\n                sh '''\n                docker build -t $FULL_IMAGE_NAME .\n                docker push $FULL_IMAGE_NAME\n                '''\n            }\n        }\n        stage('Pull Latest Image') {\n            steps {\n                sh '''\n                docker pull $FULL_IMAGE_NAME\n                '''\n            }\n        }\n    }\n}",
        "output_docs": "==========================================\nDocumentation and Setup Guide\n==========================================\n\nPre-requisites:\n\n1. Jenkins Agent Setup\n   - Agent Label: MOBAgent (update if needed)\n   - Docker must be installed and running on the agent.\n   - Jenkins agent user must have permission to run Docker commands.\n   - Network access to Azure Container Registry (ACR).\n\n2. Required Jenkins Plugins\n   - Pipeline Plugin\n   - Pipeline: Docker Plugin (for `withDockerRegistry`)\n   - Credentials Plugin (to store ACR service connection credentials)\n\n3. ACR Credentials Configuration in Jenkins\n   - Manage Jenkins -> Credentials -> Your Folder or Global\n   - Add Credential:\n       - ID: CAAASServCon (update if needed)\n       - Type: Username/Password (recommended for ACR)\n       - Username: Service Principal App ID or ACR username\n       - Password: Service Principal Secret or ACR password\n\n4. Environment Variables Explained\n   - ACR_NAME: Your Azure Container Registry name (e.g., `demodevopsregistry.azurecr.io`)\n   - IMAGE_NAME: Docker image name (e.g., `caass`)\n   - IMAGE_TAG: Image tag (default: `latest`)\n   - FULL_IMAGE_NAME: Combined image reference (`<ACR_NAME>/<IMAGE_NAME>:<IMAGE_TAG>`)\n\n5. Project Structure\n   - This pipeline expects the Dockerfile to be present in the root of the repository.\n   - Example:\n     ```\n     my-project/\n     ├── Jenkinsfile\n     ├── Dockerfile\n     └── application files...\n     ```\n\n6. Recommended Job Configuration\n   - Job Type: Pipeline\n   - Definition: Pipeline script from SCM\n   - SCM: Git (or your version control)\n   - Branch: main (or desired branch)\n   - Script Path: Jenkinsfile (at project root)\n\n7. Pipeline Stages Summary\n   - Login to ACR: Authenticates to Azure Container Registry\n   - Build and Push: Builds Docker image and pushes to ACR\n   - Pull Latest Image: Pulls the pushed image (for optional verification)\n\n==========================================\n"
    },
    {
        "input_example": "[\n    {{\n        \"trigger\": [\n            \"main\"\n        ],\n        \"pool\": {{\n            \"name\": \"MOBAgent\"\n    }},\n        \"stages\": [\n            {{\n                \"stage\": \"Build with Maven\",\n                \"jobs\": [\n                    {{\n                        \"job\": \"BuildJob\",\n                        \"displayName\": \"Build Job\",\n                        \"steps\": [\n                            {{\n                                \"task\": \"Maven\",\n                                \"inputs\": {{\n                                    \"mavenPomFile\": \"pom.xml\",\n                                    \"goals\": \"clean install\"\n    }},\n                                \"displayName\": \"Build with Maven\"\n    }}\n                        ]\n    }}\n                ]\n    }},\n            {{\n                \"stage\": \"Publish Artifacts\",\n                \"jobs\": [\n                    {{\n                        \"job\": \"PublishJob\",\n                        \"displayName\": \"Publish Job\",\n                        \"steps\": [\n                            {{\n                                \"task\": \"PublishBuildArtifacts\",\n                                \"inputs\": {{\n                                    \"pathToPublish\": \"$(Build.SourcesDirectory)/target\",\n                                    \"artifactName\": \"drop\"\n    }},\n                                \"displayName\": \"Publish Artifacts\"\n    }}\n                        ]\n    }}\n                ]\n    }}\n        ]\n    }}\n]",
        "output_example": "pipeline {\n    agent any\n\n    stages {\n    stage('Checkout') {\n        steps {\n            git branch: 'main',url: 'https://github.com/name/repo.git'\n        }\n    }        stage('Build with Maven') {\n            steps {\n                script {\n                    sh 'mvn clean install'\n                }\n            }\n        }\n\n        stage('Publish Artifacts') {\n            steps {\n                script {\n                    archiveArtifacts artifacts: 'target/**', fingerprint: true\n                }\n            }\n        }\n    }\n}",
        "output_docs": "==========================================\nDocumentation and Setup Guide\n==========================================\n\nPre-requisites:\n\n1. Jenkins Agent Setup\n   - Agent Label: MOBAgent (update if needed)\n   - Java and Maven must be installed and available in PATH.\n   - Maven should be configured to access any required internal or external repositories.\n\n2. Required Jenkins Plugins\n   - Pipeline Plugin\n   - Pipeline: Basic Steps Plugin (for `archiveArtifacts`)\n\n3. Project Structure\n   - This pipeline expects a Maven project structure, for example:\n     ```\n     my-project/\n     ├── Jenkinsfile\n     ├── pom.xml\n     └── src/\n     ```\n   - The `pom.xml` should define how the project is built and what artifacts are produced.\n\n4. Recommended Job Configuration\n   - Job Type: Pipeline\n   - Definition: Pipeline script from SCM\n   - SCM: Git (or your version control)\n   - Branch: main (or desired branch)\n   - Script Path: Jenkinsfile (at project root)\n\n5. Pipeline Stages Summary\n   - Build with Maven: Runs `mvn clean install` to build the project.\n   - Publish Artifacts: Archives all files inside `target/` directory for future reference or download.\n\n6. Optional Artifact Publishing\n   - If you want to publish the artifacts to an artifact repository (like Nexus/Artifactory), you can add another step using `mvn deploy` or similar.\n\n=========================================="
    },
    {
        "input_example": "[\n    {{\n        \"trigger\": [\"main\"],\n        \"pool\": {{\"name\": \"MOBAgent\"}},\n        \"stages\": [\n            {{\n                \"stage\": \"Maven Build and Tomcat Deploy\",\n                \"steps\": [\n                    {{\n                        \"task\": \"Maven\",\n                        \"inputs\": {{\n                            \"mavenPomFile\": \"pom.xml\",\n                            \"goals\": \"package\"\n                        }},\n                        \"displayName\": \"Build with Maven\"\n                    }},\n                    {{\n                        \"script\": \"cp target/*.war /opt/tomcat/webapps/\",\n                        \"displayName\": \"Deploy to Tomcat\"\n                    }}\n                ]\n            }}\n        ]\n    }}\n]",
        "output_example": "pipeline {\n    agent any\n\n    stages {\n    stage('Checkout') {\n        steps {\n            git branch: 'main',url: 'https://github.com/name/repo.git'\n        }\n    }        stage('Maven Build and Tomcat Deploy') {\n            steps {\n                sh 'mvn clean package'\n                sh 'copy target/*.war /opt/tomcat/webapps/'\n            }\n        }\n    }\n}",
        "output_docs": "Deploys a WAR file to a local Tomcat server after building with Maven. Ensure Tomcat is installed and accessible on the agent machine. WAR is copied to the webapps directory for deployment."
    },
    {
        "input_example": "[\n    {{\n        \"trigger\": [\"main\"],\n        \"pool\": {{\"name\": \"MOBAgent\"}},\n        \"stages\": [\n            {{\n                \"stage\": \"Gradle Build and Tomcat Deploy\",\n                \"steps\": [\n                    {{\n                        \"script\": \"./gradlew build\",\n                        \"displayName\": \"Build with Gradle\"\n                    }},\n                    {{\n                        \"script\": \"cp build/libs/*.war /opt/tomcat/webapps/\",\n                        \"displayName\": \"Deploy to Tomcat\"\n                    }}\n                ]\n            }}\n        ]\n    }}\n]",
        "output_example": "pipeline {\n    agent any\n\n    stages {\n    stage('Checkout') {\n        steps {\n            git branch: 'main',url: 'https://github.com/name/repo.git'\n        }\n    }        stage('Gradle Build and Tomcat Deploy') {\n            steps {\n                sh './gradlew build'\n                sh 'copy build/libs/*.war /opt/tomcat/webapps/'\n            }\n        }\n    }\n}",
        "output_docs": "Builds project using Gradle and deploys the WAR file to a local Tomcat server. Gradle wrapper should be included in the project. Ensure Tomcat directory is accessible on the Jenkins agent."
    },
    {
        "input_example": "[\n    {{\n        \"trigger\": [\"main\"],\n        \"pool\": {{\"name\": \"MOBAgent\"}},\n        \"stages\": [\n            {{\n                \"stage\": \"Deploy\",\n                \"steps\": [\n                    {{\n                        \"script\": \"cp target/myapp.war /opt/tomcat/webapps/\",\n                        \"displayName\": \"Copy WAR to Tomcat\"\n                    }}\n                ]\n            }}\n        ]\n    }}\n]",
        "output_example": "pipeline {\n    agent any\n\n    stages {\n    stage('Checkout') {\n        steps {\n            git branch: 'main',url: 'https://github.com/name/repo.git'\n        }\n    }        stage('Deploy') {\n            steps {\n                sh 'copy target/myapp.war /opt/tomcat/webapps/'\n            }\n        }\n    }\n}",
        "output_docs": "Copies a pre-built WAR file to the Tomcat `webapps/` folder. Assumes WAR exists in the `target/` directory. Tomcat will auto-deploy on copy if configured correctly."
    },
    {
        "input_example": "[\n    {{\n        \"trigger\": [\"main\"],\n        \"pool\": {{\"name\": \"MOBAgent\"}},\n        \"stages\": [\n            {{\n                \"stage\": \"Deploy\",\n                \"steps\": [\n                    {{\n                        \"script\": \"curl -u admin:password --upload-file target/app.war http://localhost:8080/manager/text/deploy?path=/app&update=true\",\n                        \"displayName\": \"Deploy using Tomcat Manager\"\n                    }}\n                ]\n            }}\n        ]\n    }}\n]",
        "output_example": "pipeline {\n    agent any\n\n    stages {\n    stage('Checkout') {\n        steps {\n            git branch: 'main',url: 'https://github.com/name/repo.git'\n        }\n    }        stage('Deploy') {\n            steps {\n                withCredentials([usernamePassword(credentialsId: 'tomcat-credentials', passwordVariable: 'tomcatPassword', usernameVariable: 'tomcatUsername')]) { // Replace 'tomcat-credentials' with your credentials ID\n                    bat '''curl -u %tomcatUsername%:%tomcatPassword% -T target/dynamic-web-app.war 'http://localhost:8081/manager/text/deploy?path=/dynamic-web-app&update=true'\n                    '''\n                }\n        }\n    }\n}",
        "output_docs": "Deploys a WAR file to Tomcat using the Tomcat Manager API with credentials. Ensure `manager-script` role is configured for the user in `tomcat-users.xml`."
    },
    {
        "input_example": "[\n    {{\n        \"trigger\": [\"main\"],\n        \"pool\": {{\"name\": \"MOBAgent\"}},\n        \"stages\": [\n            {{\n                \"stage\": \"Restart Tomcat\",\n                \"steps\": [\n                    {{\n                        \"script\": \"systemctl restart tomcat\",\n                        \"displayName\": \"Restart Tomcat Service\"\n                    }}\n                ]\n            }}\n        ]\n    }}\n]",
        "output_example": "pipeline {\n    agent any\n\n    stages {\n    stage('Checkout') {\n        steps {\n            git branch: 'main',url: 'https://github.com/name/repo.git'\n        }\n    }        stage('Restart Tomcat') {\n            steps {\n                sh 'systemctl restart tomcat'\n            }\n        }\n    }\n}",
        "output_docs": "Restarts the Tomcat service using systemd. The Jenkins agent must have permission to execute the command (possibly using sudo or appropriate service configuration)."
    }
]